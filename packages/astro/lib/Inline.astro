---
import { getBreakpointValue, joinStyles, uid } from '@chisel-ui/core'
import './Inline.css'
import InlineCluster from './InlineCluster.astro'
import type { Breakpoint, Theme } from '@chisel-ui/core'
import type { Props as InlineClusterProps } from './InlineCluster.astro'

export interface Props<T extends Theme = Theme> extends InlineClusterProps<T> {
	stretch?: 'all' | 'start' | 'end' | number
	switchAt?: Breakpoint<T['breakpoints']>
}

function getStretchSelector(stretch?: Props['stretch']) {
    if (stretch === 'all') {
        return '*'
    } else if (stretch === 'start') {
        return ':first-child'
    } else if (stretch === 'end') {
        return ':last-child'
    } else if (typeof stretch === 'number') {
        return `:nth-child(${stretch})`
    }

    return undefined
}

const { theme = {}, id = uid(), stretch, switchAt = '0px', style = '', ...props } = Astro.props as Props

const safeSwitchAt = getBreakpointValue(theme, switchAt)
const safeStretch = getStretchSelector(stretch)

const inlineStyle = safeStretch && `
    #${id} > ${safeStretch} {
        flex: 1;
    }
`

const componentStyle = joinStyles(
    safeSwitchAt && `--switch-at: ${safeSwitchAt}`,
    style
)
---

<InlineCluster data-chisel-inline {id} style={componentStyle} {theme} {...props}>
    <slot />
</InlineCluster>

{inlineStyle && (
    <style set:html={inlineStyle}></style>
)}