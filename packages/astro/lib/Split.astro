---
import { getBreakpointValue, uid } from '@chisel-ui/core'
import './Split.css'
import Layout from './Layout.astro'
import type { Breakpoint, Theme } from '@chisel-ui/core'
import type { Props as LayoutProps } from './Layout.astro'

type Fraction = `${number}/${number}` | `${number} / ${number}` | 'auto-start' | 'auto-end'

export interface Props<T extends Theme = Theme> extends LayoutProps<T> {
	fraction?: Fraction
	switchAt?: Breakpoint<T['breakpoints']>
}

const FRACTION_PATTERN = /(?:[1-9][0-9]*|0).?\/.?[1-9][0-9]*/g

function getFraction(value: Fraction) {
	if (value.match(FRACTION_PATTERN)) {
		const [start, end] = value.split('/')
		return `${start.trim()}fr ${end.trim()}fr`
	} else if (value === 'auto-start') {
		return 'auto 1fr'
	} else if (value === 'auto-end') {
		return '1fr auto'
	} else {
		return '1fr 2fr'
	}
}

const {
	theme = {},
	id = uid(),
	fraction = '1/2',
	switchAt = '0px',
	...props
} = Astro.props as Props

const safeFraction = getFraction(fraction)
const safeBreakpoint = getBreakpointValue(theme, switchAt)

const inlineStyle = `
    @media (min-width: ${safeBreakpoint}) {
        #${id} {
            --columns: ${safeFraction};
        }
    }
`
---

<Layout data-chisel-split {id} {theme} {...props}>
	<slot />
</Layout>

<style set:html={inlineStyle}></style>

