---
import Component, { ComponentProps } from '../Component.astro'

export interface FrameProps extends ComponentProps {
    ratio?: Ratio
    position?: string
}

type RatioString = `${number}/${number}` | `${number} / ${number}`
type Ratio = [number, number] | RatioString

function checkIsRatio(ratio: unknown): ratio is Ratio {
  const isCorrectArray =
    Array.isArray(ratio) && ratio.length === 2 && ratio.every(Number.isFinite);
  return (
    isCorrectArray ||
    (typeof ratio === "string" &&
      /^\d{1,1000} {0,1}\/ {0,1}\d{1,1000}$/.test(ratio))
  );
}

function getRatioString(ratio: Ratio): RatioString {
  return Array.isArray(ratio) ? (ratio.join("/") as RatioString) : ratio;
}

function getSafeRatio(ratio: unknown): RatioString | undefined {
  const isRatio = checkIsRatio(ratio);

  return isRatio ? getRatioString(ratio) : undefined;
}

const { ratio, position, style = '', ...props } = Astro.props as FrameProps

const safeRatio = getSafeRatio(ratio)

const componentStyle = [
    safeRatio && `--ratio: ${ratio}`,
    position && `--position: ${position}`,
    style,
].filter(Boolean).join(';')
---

<Component data-chisel-frame style={componentStyle} {...props}>
    <slot />
</Component>

<style global>
    [data-chisel-frame] {
        box-sizing: border-box;
        display: block;
        inline-size: 100%;
        position: relative;
        overflow: hidden;
    }

    [data-chisel-frame][style*="--ratio"] {
        aspect-ratio: var(--ratio);
    }

    [data-chisel-frame] > * {
        position: absolute;

        inset-block-start: 0;
        inset-block-end: 0;
        inset-inline-start: 0;
        inset-inline-end: 0;
        
        inset-block: 0;
        inset-inline: 0;

        display: flex;
        justify-content: center;
        align-items: center;
    }

    [data-chisel-frame] > :is(img, video) {
        inline-size: 100%;
        block-size: 100%;
        size: 100%;

        object-fit: cover;
        object-position: var(--position, 50%);
    }
</style>