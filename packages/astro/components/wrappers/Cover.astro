---
import { checkIsCSSLength, getSizeValue, CSSLength, SizeOptions } from '../../index.ts'
import Spacer, { SpacerProps } from '../Spacer.astro'

export interface CoverProps extends SpacerProps {
    minHeight?: MinHeight
    stretchContent?: boolean
}

type MinHeight = CSSLength | number | SizeOptions

function getSafeMinHeight<T extends Record<string, unknown>>(
  theme: T,
  minHeight?: MinHeight
) {
  if (typeof minHeight === "number") return `${minHeight}px`;
  if (checkIsCSSLength(minHeight as string)) return minHeight;
  return getSizeValue(theme, minHeight as string);
}

const { minHeight, stretchContent, theme = {}, style = '', ...props } = Astro.props as CoverProps

const safeMinHeight = getSafeMinHeight(theme, minHeight)

const componentStyle = [
    safeMinHeight && `--minHeight: ${safeMinHeight}`,
    style,
].filter(Boolean).join(';')
---

<Spacer data-chisel-cover={stretchContent ? "stretch-content": "" } style={componentStyle} {theme} {...props}>
    {Astro.slots.top && (
        <div data-chisel-cover-top>
            <slot name="top" />
        </div>
    )}
    <div data-chisel-cover-centered>
        <slot />
    </div>
    {Astro.slots.bottom && (
        <div data-chisel-cover-top>
            <slot name="bottom" />
        </div>
    )}
</Spacer>

<style global>
    [data-chisel-cover] {
        display: flex;
        flex-direction: column;
        gap: var(--gutter, 0px);
        min-block-size: var(--minHeight, 100vh);
    }

    [data-chisel-cover] > * {
        margin: 0;
    }

    [data-chisel-cover-centered] {
        margin-block-start: auto;
        margin-block-end: auto;
    }

    [data-chisel-cover="stretch-content"] [data-chisel-cover-centered] {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    [data-chisel-cover="stretch-content"] [data-chisel-cover-centered] > * {
        flex: 1;
    }
</style>